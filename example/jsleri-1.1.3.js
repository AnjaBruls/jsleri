window["jsleri"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./jsleri.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./jsleri.js":
/*!*******************!*\
  !*** ./jsleri.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* global process */\n\n/*\n *  JS-Leri - JavaScript LR-Parsing Module $VERSION$\n *\n *  Another parser module which allows writing the language in plain JavaScript.\n *  This project was inspired by lrparsing (http://lrparsing.sourceforge.net/), a Python\n *  parser written by Russell Stuart, 2014-05-29.\n *\n *  copyright 2015, Jeroen van der Heijden (Transceptor Technology)\n */\n\nvar version = \"1.1.3\" || '';\n\n// dummy function which can be used as alternative for onEnter and onExit methods\nvar noop = function noop() {};\n\nvar RE_LEFT_WHITESPACE = /^\\s+/;\nvar RE_KEYWORDS = /^\\w+/;\nvar RE_WHITESPACE = /\\s+/;\n\nvar isFunction = function isFunction(obj) {\n    return typeof obj === 'function';\n};\n\nvar buildReKeywords = function buildReKeywords(re) {\n    if (typeof re === 'string' && re.indexOf('^', 0) !== 0) {\n        re = '^' + re;\n    }\n    return new RegExp(re);\n};\n\nvar sortOnStrLen = function sortOnStrLen(a, b) {\n    return a.length < b.length;\n};\n\nvar parse = function parse(element, str, tree, reKeywords) {\n    // expecting instance, used for returning feedback when statement is invalid\n    var expecting = new Expecting();\n\n    // used to add a node to the tree\n    var appendTree = function appendTree(tree, node, pos) {\n        if (pos > expecting.pos) {\n            expecting.empty();\n        }\n        node.end = pos;\n        node.str = str.substring(node.start, node.end);\n        tree.push(node);\n    };\n\n    // recursive function to 'walk' through the tree\n    var walk = function walk(element, pos, tree, rule, isRequired) {\n\n        var s, isValid, nodeRes, i, l, reMatch, children, node, mostGreedy;\n\n        s = str.substring(pos).replace(RE_LEFT_WHITESPACE, '');\n\n        node = new Node(element, str.length - s.length);\n\n        expecting.setModeRequired(node.start, isRequired);\n\n        /**************************************************************************\n         * Choice\n         **************************************************************************/\n        if (element instanceof Choice) {\n            mostGreedy = new NodeResult(false, node.start);\n\n            for (i = 0, l = element.elements.length; i < l; i++) {\n                children = [];\n                nodeRes = walk(element.elements[i], node.start, children, rule, true);\n\n                if (nodeRes.isValid && nodeRes.pos > mostGreedy.pos) {\n                    node.children = children;\n                    mostGreedy = nodeRes;\n                }\n            }\n            if (mostGreedy.isValid) appendTree(tree, node, mostGreedy.pos);\n            return mostGreedy;\n        }\n\n        /**************************************************************************\n         * Keyword\n         **************************************************************************/\n        if (element instanceof Keyword) {\n            reMatch = s.match(reKeywords);\n            isValid = element.ignCase ? Boolean(reMatch && reMatch[0].toLowerCase() === element.keyword.toLowerCase()) : Boolean(reMatch && reMatch[0] === element.keyword);\n            if (isValid) appendTree(tree, node, node.start + element.keyword.length);else expecting.update(element, node.start);\n            return new NodeResult(isValid, node.end || node.start);\n        }\n\n        /**************************************************************************\n         * List\n         **************************************************************************/\n        if (element instanceof List) {\n            pos = node.start;\n            for (i = 0, l = 0;;) {\n\n                nodeRes = walk(element.element, pos, node.children, rule, i < element.min);\n                if (!nodeRes.isValid) break;\n                pos = nodeRes.pos;\n                i++;\n\n                nodeRes = walk(element.delimiter, pos, node.children, rule, i < element.min);\n                if (!nodeRes.isValid) break;\n                pos = nodeRes.pos;\n                l++;\n            }\n            isValid = !(i < element.min || element.max && i > element.max || !element.opt && i && i == l);\n            if (isValid) appendTree(tree, node, pos);\n            return new NodeResult(isValid, pos);\n        }\n\n        /**************************************************************************\n         * Optional\n         **************************************************************************/\n        if (element instanceof Optional) {\n            nodeRes = walk(element.element, node.start, node.children, rule, false);\n            if (nodeRes.isValid) appendTree(tree, node, nodeRes.pos);\n            return new NodeResult(true, node.end || node.start);\n        }\n\n        /**************************************************************************\n         * Prio\n         **************************************************************************/\n        if (element instanceof Prio) {\n            if (rule._tested[node.start] === undefined) {\n                rule._tested[node.start] = new NodeResult(false, node.start);\n            }\n            for (i = 0, l = element.elements.length; i < l; i++) {\n                children = [];\n                nodeRes = walk(element.elements[i], node.start, children, rule, true);\n\n                if (nodeRes.isValid && nodeRes.pos > rule._tested[node.start].pos) {\n                    node.children = children;\n                    rule._tested[node.start] = nodeRes;\n                    rule._tree[node.start] = children;\n                }\n            }\n            if (rule._tested[node.start].isValid) appendTree(tree, node, rule._tested[node.start].pos);\n            return rule._tested[node.start];\n        }\n\n        /**************************************************************************\n         * Regex\n         **************************************************************************/\n        if (element instanceof Regex) {\n            reMatch = s.match(element._re);\n            isValid = Boolean(reMatch);\n\n            if (isValid) appendTree(tree, node, node.start + reMatch[0].length);else expecting.update(element, node.start);\n            return new NodeResult(isValid, node.end || node.start);\n        }\n\n        /**************************************************************************\n         * Repeat\n         **************************************************************************/\n        if (element instanceof Repeat) {\n            pos = node.start;\n            for (i = 0; !element.max || i < element.max; i++) {\n                nodeRes = walk(element.element, pos, node.children, rule, i < element.min);\n                if (!nodeRes.isValid) break;\n                pos = nodeRes.pos;\n            }\n            isValid = i >= element.min;\n            if (isValid) appendTree(tree, node, pos);\n            return new NodeResult(isValid, pos);\n        }\n\n        /**************************************************************************\n         * Rule\n         **************************************************************************/\n        if (element instanceof Rule) {\n            element._tested = {};\n            element._tree = {};\n            nodeRes = walk(element.element, node.start, node.children, element, true);\n            if (nodeRes.isValid) appendTree(tree, node, nodeRes.pos);\n            return nodeRes;\n        }\n\n        /**************************************************************************\n         * Sequence\n         **************************************************************************/\n        if (element instanceof Sequence) {\n\n            pos = node.start;\n            for (i = 0, l = element.elements.length; i < l; i++) {\n                nodeRes = walk(element.elements[i], pos, node.children, rule, true);\n                if (nodeRes.isValid) pos = nodeRes.pos;else return nodeRes;\n            }\n            appendTree(tree, node, nodeRes.pos);\n            return nodeRes;\n        }\n\n        /**************************************************************************\n         * Token\n         **************************************************************************/\n        if (element instanceof Token) {\n            isValid = Boolean(s.indexOf(element.token) === 0);\n\n            if (isValid) appendTree(tree, node, node.start + element.token.length);else expecting.update(element, node.start);\n            return new NodeResult(isValid, node.end || node.start);\n        }\n\n        /**************************************************************************\n         * Tokens\n         **************************************************************************/\n        if (element instanceof Tokens) {\n            for (i = 0, l = element.tokens.length; i < l; i++) {\n                if (s.indexOf(element.tokens[i]) === 0) {\n                    appendTree(tree, node, node.start + element.tokens[i].length);\n                    return new NodeResult(true, node.end);\n                }\n            }\n            expecting.update(element, node.start);\n            return new NodeResult(false, node.start);\n        }\n\n        /**************************************************************************\n         * This\n         **************************************************************************/\n        if (element instanceof This) {\n            if (rule._tested[node.start] === undefined) {\n                rule._tested[node.start] = walk(rule.element, node.start, node.children, rule, true);\n                rule._tree[node.start] = node.children;\n            } else {\n                node.children = rule._tree[node.start];\n            }\n            if (rule._tested[node.start].isValid) appendTree(tree, node, rule._tested[node.start].pos);\n            return rule._tested[node.start];\n        }\n    };\n\n    // start walking the tree\n    var nodeRes = walk(element, 0, tree, element, true);\n\n    // get rest if anything\n    var rest = str.substring(nodeRes.pos).replace(RE_LEFT_WHITESPACE, '');\n\n    // set isValid to False if we have 'rest' left.\n    if (nodeRes.isValid && rest) nodeRes.isValid = false;\n\n    // add EndOfStatement to expecting if this is possible\n    if (!expecting.required.length && rest) {\n        expecting.setModeRequired(nodeRes.pos, true);\n        expecting.update(EOS, nodeRes.pos);\n    }\n\n    nodeRes.expecting = expecting.getExpecting();\n\n    // add expecting and correct pos to nodeRes if nodeRes is not valid\n    if (!nodeRes.isValid) nodeRes.pos = expecting.pos;\n\n    // return nodeRes\n    return nodeRes;\n};\n\n/**************************************************************************\n * Choice constructor\n **************************************************************************/\nfunction Choice() {\n    var obj = Jsleri.call(this, Choice, arguments);\n    if (obj) return obj;\n\n    this.elements = this.checkElements(this.args);\n}\nChoice.prototype = Object.create(Jsleri.prototype);\nChoice.prototype.constzructor = Choice;\n\n/**************************************************************************\n * Keyword constructor\n **************************************************************************/\nfunction Keyword(keyword, ignCase) {\n    var obj = Jsleri.call(this, Keyword, arguments);\n    if (obj) return obj;\n\n    keyword = this.args[0];\n    ignCase = this.args[1];\n\n    this.keyword = keyword;\n    this.ignCase = Boolean(ignCase);\n}\nKeyword.prototype = Object.create(Jsleri.prototype);\nKeyword.prototype.constructor = Keyword;\n\n/**************************************************************************\n * List constructor\n **************************************************************************/\nvar List = function List(element, delimiter, _min, _max, opt) {\n    var obj = Jsleri.call(this, List, arguments);\n    if (obj) return obj;\n\n    element = this.args[0];\n    delimiter = this.args[1] === undefined ? new Token(',') : this.args[1];\n\n    _min = this.args[2];\n    _max = this.args[3];\n    opt = this.args[4];\n\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->List) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n\n    if (typeof delimiter !== 'string' && !(delimiter instanceof Jsleri)) throw '(Jsleri-->List) second argument must be a string or instance of Jsleri; got ' + (typeof delimiter === 'undefined' ? 'undefined' : _typeof(delimiter));\n\n    this.element = element;\n    this.delimiter = delimiter instanceof Jsleri ? delimiter : new Token(delimiter);\n    this.min = _min === undefined || _min === null ? 0 : _min;\n    this.max = _max === undefined || _max === null ? null : _max;\n\n    // when true the list may end with a delimiter\n    this.opt = Boolean(opt);\n};\nList.prototype = Object.create(Jsleri.prototype);\nList.prototype.constructor = List;\n\n/**************************************************************************\n * Optional constructor\n **************************************************************************/\nfunction Optional(element) {\n    var obj = Jsleri.call(this, Optional, arguments);\n    if (obj) return obj;\n\n    element = this.args[0];\n\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->Optional) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n\n    this.element = element;\n}\nOptional.prototype = Object.create(Jsleri.prototype);\nOptional.prototype.constructor = Optional;\n\n/**************************************************************************\n * Prio constructor\n **************************************************************************/\nfunction Prio() {\n    var obj = Jsleri.call(this, Prio, arguments);\n    if (obj) return obj;\n\n    this.elements = this.checkElements(this.args);\n    return new Rule(this);\n}\nPrio.prototype = Object.create(Jsleri.prototype);\nPrio.prototype.constructor = Prio;\n\n/**************************************************************************\n * Regex constructor\n **************************************************************************/\nfunction Regex(re, ignCase) {\n    var obj = Jsleri.call(this, Regex, arguments);\n    if (obj) return obj;\n\n    re = this.args[0];\n    ignCase = this.args[1];\n\n    this.re = re;\n    this._re = new RegExp('^' + re, Boolean(ignCase) ? 'i' : undefined);\n}\nRegex.prototype = Object.create(Jsleri.prototype);\nRegex.prototype.constructor = Regex;\n\n/**************************************************************************\n * Repeat constructor\n **************************************************************************/\nfunction Repeat(element, _min, _max) {\n    var obj = Jsleri.call(this, Repeat, arguments);\n    if (obj) return obj;\n\n    element = this.args[0];\n    _min = this.args[1];\n    _max = this.args[2];\n\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->Repeat) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n\n    this.element = element;\n    this.min = _min === undefined || _min === null ? 0 : _min;\n    this.max = _max === undefined || _max === null ? null : _max;\n}\nRepeat.prototype = Object.create(Jsleri.prototype);\nRepeat.prototype.constructor = Repeat;\n\n/**************************************************************************\n * Ref constructor\n **************************************************************************/\nvar refSet = function refSet(element) {\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->Ref-->set) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n    Object.assign(this, element);\n};\n\nfunction Ref(Cls) {\n    var Construct = function Construct() {};\n    Construct.prototype = Cls.prototype;\n    var obj = Jsleri.call(this, Construct, arguments);\n    if (obj) {\n        obj.set = refSet;\n        return obj;\n    }\n}\nRef.prototype = Object.create(Jsleri.prototype);\nRef.prototype.constructor = Ref;\n\n/**************************************************************************\n * Grammar constructor\n **************************************************************************/\nfunction Grammar(element, reKeywords) {\n    var obj = Jsleri.call(this, Grammar, arguments);\n    if (obj) return obj;\n\n    element = this.args[0];\n    reKeywords = this.args[1];\n\n    element = element === undefined ? this.constructor.START : element;\n\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->Optional) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n\n    this.reKeywords = reKeywords === undefined ? RE_KEYWORDS : buildReKeywords(reKeywords);\n    this.element = element;\n\n    this.parse = function (str) {\n        var tree = new Node(this, 0, str.length, str);\n        var nodeRes = parse(element, str, tree.children, this.reKeywords);\n\n        nodeRes.tree = tree;\n        return nodeRes;\n    };\n}\nGrammar.prototype = Object.create(Jsleri.prototype);\nGrammar.prototype.constructor = Grammar;\n\n/**************************************************************************\n * Rule constructor\n **************************************************************************/\nfunction Rule(element) {\n    var obj = Jsleri.call(this, Rule, arguments);\n    if (obj) return obj;\n\n    element = this.args[0];\n\n    if (!(element instanceof Jsleri)) throw '(Jsleri-->Rule) first argument must be an instance of Jsleri; got ' + (typeof element === 'undefined' ? 'undefined' : _typeof(element));\n\n    this.element = element;\n}\nRule.prototype = Object.create(Jsleri.prototype);\nRule.prototype.constructor = Rule;\n\n/**************************************************************************\n * Sequence constructor\n **************************************************************************/\nfunction Sequence() {\n    var obj = Jsleri.call(this, Sequence, arguments);\n    if (obj) return obj;\n\n    this.elements = this.checkElements(this.args);\n}\nSequence.prototype = Object.create(Jsleri.prototype);\nSequence.prototype.constructor = Sequence;\n\n/**************************************************************************\n * This constructor --> THIS\n **************************************************************************/\nvar This = function This() {\n    if (!(this instanceof This)) return new This();\n};\nThis.prototype = Object.create(Jsleri.prototype);\nThis.prototype.constructor = This;\nvar THIS = new This();\n\n/**************************************************************************\n * Token constructor\n **************************************************************************/\nfunction Token(token) {\n    var obj = Jsleri.call(this, Token, arguments);\n    if (obj) return obj;\n\n    token = this.args[0];\n\n    if (typeof token !== 'string') throw '(Jsleri-->Token) first argument must be a string; got ' + (typeof token === 'undefined' ? 'undefined' : _typeof(token));\n\n    this.token = token;\n}\nToken.prototype = Object.create(Jsleri.prototype);\nToken.prototype.constructor = Token;\n\n/**************************************************************************\n * Tokens constructor\n **************************************************************************/\nfunction Tokens(tokens) {\n    var obj = Jsleri.call(this, Tokens, arguments);\n    if (obj) return obj;\n\n    tokens = this.args[0];\n\n    if (typeof tokens !== 'string') throw '(Jsleri-->Tokens) first argument must be a string; got ' + (typeof tokens === 'undefined' ? 'undefined' : _typeof(tokens));\n\n    this.tokens = tokens.split(RE_WHITESPACE).sort(sortOnStrLen);\n}\nTokens.prototype = Object.create(Jsleri.prototype);\nTokens.prototype.constructor = Tokens;\n\n/**************************************************************************\n * EndOfStatement constructor\n **************************************************************************/\nfunction EndOfStatement() {\n    this.e = 'End of statement';\n}\nEndOfStatement.prototype = Object.create(Jsleri.prototype);\nEndOfStatement.prototype.constructor = EndOfStatement;\nvar EOS = new EndOfStatement();\n\n/**************************************************************************\n * NodeResult constructor\n **************************************************************************/\nfunction NodeResult(isValid, pos) {\n    this.isValid = isValid;\n    this.pos = pos;\n    this.expecting = null;\n}\n\n/**************************************************************************\n * Node constructor\n **************************************************************************/\nfunction Node(element, start, end, str) {\n    this.element = element;\n    this.start = start;\n    this.end = end;\n    this.str = str;\n    this.children = [];\n}\nNode.prototype.walk = function () {\n    this.element.onEnter(this);\n    for (var i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].walk();\n    }\n    this.element.onExit(this);\n};\n\n/**************************************************************************\n * Expecting constructor\n **************************************************************************/\nfunction Expecting() {\n    this.required = [];\n    this.optional = [];\n    this.pos = 0;\n    this._modes = [this.required];\n}\nExpecting.prototype.setModeRequired = function (pos, isRequired) {\n    if (this._modes[pos] !== this.optional) this._modes[pos] = isRequired === false ? this.optional : this.required;\n};\nExpecting.prototype.empty = function () {\n    this.required.length = 0;\n    this.optional.length = 0;\n};\nExpecting.prototype.update = function (element, pos) {\n    if (pos > this.pos) {\n        this.empty();\n        this.pos = pos;\n    }\n    if (pos === this.pos && this._modes[pos].indexOf(element) === -1) this._modes[pos].push(element);\n};\nExpecting.prototype.getExpecting = function () {\n    return this.required.concat(this.optional);\n};\n\n/***************************************************************************\n * Jsleri constructor\n *\n * All 'other' objects inherit from Jsleri\n ***************************************************************************/\nfunction Jsleri(Cls, args) {\n    args = Array.prototype.slice.call(args);\n\n    if (!(this instanceof Cls)) return new (Cls.bind.apply(Cls, [Cls].concat(args)))();\n\n    this.setCallbacks(args);\n    this.args = args;\n}\nJsleri.prototype.setCallbacks = function (args) {\n    var first = args[0];\n\n    if (first === undefined || first === null || typeof first === 'string' || first instanceof Jsleri) return;\n\n    if (isFunction(first.onEnter)) this.onEnter = first.onEnter;\n\n    if (isFunction(first.onExit)) this.onExit = first.onExit;\n\n    args.splice(0, 1);\n};\nJsleri.prototype.onEnter = noop;\nJsleri.prototype.onExit = noop;\nJsleri.prototype.checkElements = function (a) {\n    var i = 0,\n        l = a.length;\n    if (l === 0) throw '(Jsleri-->' + this.constructor.name + ') Need at least one Jsleri argument';\n    for (; i < l; i++) {\n        if (!(a[i] instanceof Jsleri)) {\n            a[i] = new Token(a[i]);\n        }\n    }return a;\n};\nJsleri.prototype.checkElement = function (a) {\n    if (!(a instanceof Jsleri)) {\n        a = new Token(a);\n    }\n    return a;\n};\n\nexports.version = version;\nexports.noop = noop;\nexports.Keyword = Keyword;\nexports.Regex = Regex;\nexports.Token = Token;\nexports.Tokens = Tokens;\nexports.Sequence = Sequence;\nexports.Choice = Choice;\nexports.Repeat = Repeat;\nexports.List = List;\nexports.Optional = Optional;\nexports.Ref = Ref;\nexports.Prio = Prio;\nexports.THIS = THIS;\nexports.Grammar = Grammar;\nexports.EOS = EOS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./jsleri.js\n");

/***/ })

/******/ });