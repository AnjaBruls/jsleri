

Rule(Prio(
    expr,
    Sequence('(', THIS, ')')
    Sequence(THIS, k_and, THIS)
    Sequence(THIS, k_or, THIS)
))



where (bla == 'sdvs' and 5 > 4)



s = (iris and iris and iris) or iris

s = bla and bla


Prio(
    iris,
    '(' + THIS + ')'
    THIS + and + THIS
    THIS + or + THIS
)


token = []

pos = 0
for p in prio:
    p == keyword ? iris ? nope...
    p == sequence ?
        for s in sequence:
            s == '(' Nope ...
    p == sequence ?
        for s in sequence:
            s == THIS ?
                tested[0] ? no --> set tested[0] (isValid = False, pos = 0)
                return walk prio(pos)


pos = 0
for p in prio:
    p == keyword ? iris ? nope..
    p == sequence '('.. nope.
    p == sequence?
        for s in sequence:
            s == THIS ?
                tested[0] ? yes, return isValid = false
    p == sequence? same as above

pos = 0
for p in prio:
    p == keyword ? iris ? nope..
    p == sequence ?
        for s in sequence:
            s == token ? '(' ? True pos += 1
            s == THIS ?
                tested[1] ? no --> set tested[1] (isValid = False, pos = 1)
                return walk prio(pos) (isValid True) pos = 13
            s == token ? ')' ? True pos += 2
        updateGreedy(tested[1])
    p == sequence ?
        for s in sequence:
            s == THIS ?
                tested[1] ? yes --> reuslt.isValid? yes --> pos += 12
            s == keyword ? k_and --> nope
    p == sequence ?
        for s in sequence:
            s == THIS ?
                tested[1] ? yes --> reuslt.isValid? yes --> pos += 12
            s == keyword ? k_or --> yes --> pos += 4
            s == THIS ?
                tested[17] ? no --> set test[17] (isvalid = Fasle, pos = 17)
                return walk prio(pos)
        updateGreede(tested[1])




s = iris and iris and iris ) or iris (pos = 1)
for p in prio:
    p == keyword ? iris ? yes --> updateGreedy(tested[1])
    p == sequence ? for s in seq: s == token ? '(' ? nope..
    p == sequence ?
        for s in sequence:
            s == THIS ?
                tested[1] ? yes --> reuslt.isValid? yes --> pos += 4
            s = keyword ? k_and ? yes --> pos += 5
            s == THIS ? // iris ) or iris pos = 10
                tested[10] ? no --> set tested[10] (isValid = False, pos = 10)
                return walk prio(pos)

                ##coninue 1.

        updateGreedy(tested[1])

    p == sequence ?  _or_ ? nope...
return tested[1]



s = iris and iris) or iris (pos = 10)
for p in prio:
    p == keyword ? iris ? yes --> updateGreedy(tested[10])
    p == sequence ? for s in seq: s == token ? '(' ? nope..
    p == sequence ?
        for s in sequence:
            s == THIS ?
                tested[10] ? yes --> reuslt.isValid? yes --> pos += 4
            s == keyword ? k_and --> yes..
    p == sequence... (same as above be with k_or)
return tested[10]
## goto 1.)



